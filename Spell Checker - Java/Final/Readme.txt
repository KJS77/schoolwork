The problem that I attempted to solve was implementing a spelling checker for text.    The program will take a line of text, separate it into words, find any words not contained in the dictionary, and then suggest fixes for the misspellings based on which actual words are closest.  

There are a few methods to search for the correction of a word that is not in the dictionary.  The first method is to simply pinpoint where the misspelled word would be in the dictionary, and suggest the closest words to that point as fixes.  The problem with this method is that it will only find the correct fix if the misspelling occurs near the end of the word.  
The program could also compare the misspelled word to correct words and compare how many letters are similar.  The problem with this method is that it would require comparing a large amount of words for each misspelling. It would also have issues with words that have an extra letter omitted or added.
A faster method involves hashing the misspelled word with small changes against the The program could add a letter at a position, remove a letter from a position, switch a letter at one position for another letter, or swap letters in adjacent positions.  Testing for all of these methods is fairly time consuming, since every letter needs to be tested, but this method will still be faster than the previous because it is hashing directly to values and not comparing a large number of strings.  The main problem with this method is correcting words that have more than one misplaced letter, which would exponentially increase the searching if implemented.
A fast and simple solution is to have a list of common misspellings and what correct words they map to, but this solution was not possible for me because it would require analyzing a large amount of data that I don't have access to.

I chose to use the third method listed above because I felt it would find most misspellings and still run in an acceptable amount of time.
My spell checking program first creates the dictionary of proper words in a hash table.  The program then takes a line of text from the console and separates it into words.  Each of these words is checked against the dictionary.  If the word is found, the program confirms it and moves to the next word.  If the word is not found, the program begins to search for suggestions.  
The searching stage consists of making small changes to the misspelled word and checking if those changes create a proper word. If a word is found, it will assign that word a value based on how likely that mistake would be while typing.  This is done by calculating how far the mistyped key is from the correct key, or in the case of extra or omitted letters, how common the letter is. 
The program begins at the first character in the word.  It attempts to insert each letter at the beginning of the word, and then tests removing the first letter of the word.  Then, it loops through testing inserting a letter, replacing a letter, swapping letters, and removing a letter at each position in the word.
Once the testing has finished, the 7 words calculated as the most likely fixes are returned in an arraylist.  To illustrate how the probability is calculated I print the values of the probabilities as well.
The program will continue to accept lines of text until the user chooses to quit.